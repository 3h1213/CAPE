# Copyright (C) 2017 Kevin O'Reilly (kevin.oreilly@contextis.co.uk)
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import struct
import binascii
import os.path
from Crypto.PublicKey import RSA

MAX_STRING_SIZE = 256

def string_from_offset(buffer, offset):
    string = buffer[offset:offset+MAX_STRING_SIZE].split("\0")[0]
    return string

def get_config_item(config, offset):
    config_string = string_from_offset(config, offset)
    if ' ' in config_string:
        config_list = config_string.split(' ')
        return config_list
    else:
        return config_string

def convert_pubkey(pub):
	#bit = struct.unpack_from('<I', pub)[0]
	bit = 0x200
	mod = pub[4:(bit/8)+4]
	exp = pub[(bit/8)+4:]

	mod = int(binascii.hexlify(mod),16)
	exp = int(binascii.hexlify(exp),16)
	keypub = RSA.construct((mod, long(exp)))
	pempub = keypub.exportKey('PEM')
	return((keypub, pempub))

def config(raw_data):
    config_dict = {}

    if len(raw_data) == 132:
        (keypub,pempub) = convert_pubkey(raw_data)
        config_dict['RSA public key'] = pempub
        return config_dict

    dword1 = struct.unpack('I', raw_data[0:4])[0]
    dword2 = struct.unpack('I', raw_data[4:8])[0]

    if dword1 < 0x40:
        number_of_sections = dword1
        section_count = 0
        section_offset = 8
        while section_count < number_of_sections:
            section_key  = struct.unpack('I', raw_data[section_offset:section_offset+4])[0]
            section_type = struct.unpack('I', raw_data[section_offset+4:section_offset+8])[0]
            if section_type == 1:
                data_offset = struct.unpack('I', raw_data[section_offset+8:section_offset+12])[0]
                config_item = get_config_item(raw_data, section_offset + data_offset)
                if config_item == "":
                    section_count += 1
                    section_offset += 24
                    continue
                if section_key == 0xD0665BF6:
                    config_dict['Domains'] = config_item
                elif section_key == 0x73177345:
                    config_dict['DGA Base URL'] = config_item
                elif section_key == 0xCD850E68:
                    config_dict['DGA CRC'] = config_item
                elif section_key == 0xC61EFA7A:
                    config_dict['DGA TLDs'] = config_item
                elif section_key == 0x510F22D2:
                    config_dict['TOR Domains'] = config_item
                elif section_key == 0xDF351E24:
                    config_dict['32-bit DLL URLs'] = config_item
                elif section_key == 0x4B214F54:
                    config_dict['64-bit DLL URLs'] = config_item
                elif section_key == 0xEC99DF2E:
                    config_dict['IP Service'] = config_item
                elif section_key == 0x11271C7F:
                    config_dict['Timer'] = config_item
                elif section_key == 0xDF2E7488:
                    config_dict['DGA count'] = config_item
                elif section_key == 0x556AED8F:
                    config_dict['Server'] = config_item
                elif section_key == 0x4FA8693E:
                    config_dict['Encryption key'] = config_item
                elif section_key == 0xD7A003C9:
                    config_dict['Config Fail Timeout'] = config_item
                elif section_key == 0x18A632BB:
                    config_dict['Config Timeout'] = config_item
                elif section_key == 0x31277BD5:
                    config_dict['Task Timeout'] = config_item
                elif section_key == 0x955879A6:
                    config_dict['Send Timeout'] = config_item
                elif section_key == 0xACC79A02:
                    config_dict['Knocker Timeout'] = config_item
                elif section_key == 0x6DE85128:
                    config_dict['BC Timeout'] = config_item
                elif section_key == 0x656B798A:
                    config_dict['Botnet ID'] = config_item
                elif section_key == 0xEFC574AE:
                    config_dict['Value 11'] = config_item
                #elif section_key == 0x584E5925:
                #    config_dict['EndPointer'] = config_item

            section_count += 1
            section_offset += 24

    elif dword2 == 0:
        section_offset = 8
        section_key  = struct.unpack('I', raw_data[section_offset:section_offset+4])[0]
        section_type = struct.unpack('I', raw_data[section_offset+4:section_offset+8])[0]
        while section_type == 1:
            section_key  = struct.unpack('I', raw_data[section_offset:section_offset+4])[0]
            section_type = struct.unpack('I', raw_data[section_offset+4:section_offset+8])[0]
            data_offset = struct.unpack('I', raw_data[section_offset+8:section_offset+12])[0]
            config_item = get_config_item(raw_data, section_offset + data_offset)
            if config_item == "":
                section_offset += 24
                continue
            if section_key == 0xD0665BF6:
                config_dict['Domains'] = config_item
            elif section_key == 0x73177345:
                config_dict['DGA Base URL'] = config_item
            elif section_key == 0xCD850E68:
                config_dict['DGA CRC'] = config_item
            elif section_key == 0xC61EFA7A:
                config_dict['DGA TLDs'] = config_item
            elif section_key == 0x510F22D2:
                config_dict['TOR Domains'] = config_item
            elif section_key == 0xDF351E24:
                config_dict['32-bit DLL URLs'] = config_item
            elif section_key == 0x4B214F54:
                config_dict['64-bit DLL URLs'] = config_item
            elif section_key == 0xEC99DF2E:
                config_dict['IP Service'] = config_item
            elif section_key == 0x11271C7F:
                config_dict['Timer'] = config_item
            elif section_key == 0xDF2E7488:
                config_dict['DGA count'] = config_item
            elif section_key == 0x556AED8F:
                config_dict['Server'] = config_item
            elif section_key == 0x4FA8693E:
                config_dict['Encryption key'] = config_item
            elif section_key == 0xD7A003C9:
                config_dict['Config Fail Timeout'] = config_item
            elif section_key == 0x18A632BB:
                config_dict['Config Timeout'] = config_item
            elif section_key == 0x31277BD5:
                config_dict['Task Timeout'] = config_item
            elif section_key == 0x955879A6:
                config_dict['Send Timeout'] = config_item
            elif section_key == 0xACC79A02:
                config_dict['Knocker Timeout'] = config_item
            elif section_key == 0x6DE85128:
                config_dict['BC Timeout'] = config_item
            elif section_key == 0x656B798A:
                config_dict['Botnet ID'] = config_item
            elif section_key == 0xEFC574AE:
                config_dict['Value 11'] = config_item
            #elif section_key == 0x584E5925:
            #    config_dict['EndPointer'] = config_item
            elif section_key == 0xd3aa96d0:
                config_dict['New unknown'] = config_item
            section_offset += 24

    return config_dict

#JOINER_SECTIONS = {0xe1285e64: "CRC_PUBLIC_KEY", 0x8fb1dde1: "CRC_CLIENT_INI", 0xd722afcb: "CRC_CLIENT_INI", 0x4f75cea7: "CRC_LOADER_DLL", 0x90f8aab5: "CRC_LOADER_DLL", 0x7a042a8a: "CRC_INSTALL_INI", 0x90f8aab4: "CRC_CLIENT64", 0xda57d71a: "CRC_WORDLIST", 0xc535d8bf: "CRC_LOADER_DLL"}
#JOINER_SECTIONS = {0xe1285e64: "CRC_PUBLIC_KEY", 0x8fb1dde1: "CRC_CLIENT_INI", 0xd722afcb: "CRC_CLIENT_INI", 0x7a042a8a: "CRC_INSTALL_INI", 0x90f8aab4: "CRC_CLIENT64", 0xda57d71a: "CRC_WORDLIST"}
#INI_PARAMS = {0x4fa8693e: "CRC_SERVERKEY", 0xd0665bf6: "CRC_HOSTS", 0x656b798a: "CRC_GROUP", 0x556aed8f: "CRC_SERVER", 0x11271c7f: "CONF_TIMEOUT", 0x48295783: "CONFIG_FAIL_TIMEOUT", 0xea9ea760: "CRC_BOOTSTRAP", 0x31277bd5: "CRC_TASKTIMEOUT",0x955879a6: "CRC_SENDTIMEOUT", 0x9fd13931: "CRC_BCSERVER", 0x6de85128: "CRC_BCTIMEOUT", 0xacc79a02: "CRC_KNOCKERTIMEOUT", 0x602c2c26: "CRC_KEYLOGLIST", 0x556aed8f: "CRC_SERVER", 0xd7a003c9: "CRC_CONFIGTIMEOUT", 0x18a632bb: "CRC_CONFIGFAILTIMEOUT", 0x73177345: "CRC_DGA_SEED_URL", 0x510f22d2: "CRC_TORSERVER", 0xec99df2e: "CRC_EXTERNALIP", 0xc61efa7a: "CRC_DGATLDS", 0xdf351e24: "CRC_32BITDOWNLOAD", 0x4b214f54: "CRC_64BITDOWNLOAD", 0xcd850e68: "DGA_CRC", 0xdf2e7488: "DGA_COUNT", 0x584e5925: "TIMER"}
#